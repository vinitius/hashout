// Package server GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package server

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://viniti.us/terms",
        "contact": {
            "name": "API Support",
            "url": "https://viniti.us/contact",
            "email": "salomao.tcn@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/checkout": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cart"
                ],
                "summary": "checkout items within a cart.",
                "parameters": [
                    {
                        "description": "Products",
                        "name": "filters",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Checkout"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CheckoutResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid Or Missing Products",
                        "schema": {
                            "$ref": "#/definitions/checkoutApiError"
                        }
                    },
                    "404": {
                        "description": "Products Not Found",
                        "schema": {
                            "$ref": "#/definitions/checkoutApiError"
                        }
                    },
                    "500": {
                        "description": "Unexpected",
                        "schema": {
                            "$ref": "#/definitions/checkoutApiError"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/checkoutApiError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "checkoutApiError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                }
            }
        },
        "dto.Checkout": {
            "type": "object",
            "required": [
                "products"
            ],
            "properties": {
                "products": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Item"
                    }
                }
            }
        },
        "dto.CheckoutResponse": {
            "type": "object",
            "properties": {
                "products": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ItemResponse"
                    }
                },
                "total_amount": {
                    "type": "integer"
                },
                "total_amount_with_discount": {
                    "type": "integer"
                },
                "total_discount": {
                    "type": "integer"
                }
            }
        },
        "dto.Item": {
            "type": "object",
            "required": [
                "id",
                "quantity"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer"
                }
            }
        },
        "dto.ItemResponse": {
            "type": "object",
            "properties": {
                "discount": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "is_gift": {
                    "type": "boolean"
                },
                "quantity": {
                    "type": "integer"
                },
                "total_amount": {
                    "type": "integer"
                },
                "unit_amount": {
                    "type": "integer"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:8181",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "Hashout - Cart API",
	Description: "Rest API.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
